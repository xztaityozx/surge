name: CI CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy
          override: true
      - name: rust-clippy-check
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features --workspace

  test:
    name: Unit Test
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
      - name: Run Tests
        run: make test

  release:
    needs: [lint, test]
    runs-on: ${{matrix.job.os}}
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest,  target: arm-unknown-linux-gnueabihf , use-cross: true }
          - { os: ubuntu-latest,  target: arm-unknown-linux-musleabihf, use-cross: true }
          - { os: ubuntu-latest,  target: aarch64-unknown-linux-gnu   , use-cross: true }
          - { os: ubuntu-latest,  target: x86_64-unknown-linux-gnu    }
          - { os: ubuntu-latest,  target: x86_64-unknown-linux-musl   , use-cross: true }
          - { os: macOS-latest,   target: x86_64-apple-darwin         }
          - { os: windows-latest, target: x86_64-pc-windows-gnu       }
          - { os: windows-latest, target: x86_64-pc-windows-musl      }
    steps:
      - uses: actions/checkout@v2
      - name: setup external deps
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
            aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac

      - name: Setup variables
        shell: bash
        id: vars
        run: |
          echo ::set-output name=VERSION::$(cat Cargo.toml | sed -En '/^version/s/.+([0-9]+\.[0-9]+\.[0-9]+).+/\1/p')

      - name: Check version
        shell: bash
        run: |
          echo ${{github.ref}} | grep ${{steps.vars.outputs.VERSION}}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{matrix.job.target}}
          override: true
          profile: minimal

      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{matrix.job.use-cross}}
          command: build
          args: --target ${{matrix.job.target}} --release --locked

      - name: Strip executable
        shell: bash
        id: strip
        run: echo ::set-output name=BIN_PATH::$(make strip TARGET=${{matrix.job.target}})

      - name: Create archive
        shell: bash
        id: archive
        run: echo ::set-output name=ARCHIVE_NAME::$(make archive TARGET=${{matrix.job.target}} VERSION=v${{steps.vars.outputs.VERSION}} BIN_PATH=${{steps.strip.outputs.BIN_PATH}})

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: surge-v${steps.vars.outputs.VERSION}-${{matrix.job.target}}
          path: ${{steps.archive.outputs.ARCHIVE_NAME}}

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{steps.archive.outputs.ARCHIVE_NAME}}
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
